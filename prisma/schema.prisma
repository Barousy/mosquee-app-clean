// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(MEMBER)
  phone         String?
  address       String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  donations Donation[]
  events   Event[]
  announcements Announcement[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Mosque {
  id          String   @id @default(cuid())
  name        String
  address     String
  city        String
  country     String
  phone       String?
  email       String?
  website     String?
  latitude    Float?
  longitude   Float?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  prayerTimes PrayerTime[]
  events      Event[]
  announcements Announcement[]
}

model PrayerTime {
  id        String   @id @default(cuid())
  mosqueId  String
  date      DateTime @db.Date
  fajr      String
  sunrise   String?
  dhuhr     String
  asr       String
  maghrib   String
  isha      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mosque Mosque @relation(fields: [mosqueId], references: [id], onDelete: Cascade)

  @@unique([mosqueId, date])
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  startDate   DateTime
  endDate     DateTime?
  location    String?
  eventType   EventType   @default(GENERAL)
  status      EventStatus @default(ACTIVE)
  capacity    Int?
  isPublic    Boolean     @default(true)
  createdBy   String
  mosqueId    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  creator User    @relation(fields: [createdBy], references: [id])
  mosque  Mosque? @relation(fields: [mosqueId], references: [id])
}

model Donation {
  id          String         @id @default(cuid())
  amount      Decimal        @db.Decimal(10, 2)
  type        DonationType
  description String?
  isAnonymous Boolean        @default(false)
  donorId     String?
  status      DonationStatus @default(PENDING)
  paymentMethod String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  donor User? @relation(fields: [donorId], references: [id])
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  priority    Priority @default(MEDIUM)
  isActive    Boolean  @default(true)
  startDate   DateTime?
  endDate     DateTime?
  createdBy   String
  mosqueId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator User    @relation(fields: [createdBy], references: [id])
  mosque  Mosque? @relation(fields: [mosqueId], references: [id])
}

enum UserRole {
  ADMIN
  IMAM
  MEMBER
  VISITOR
}

enum EventType {
  PRAYER
  LECTURE
  WORKSHOP
  COMMUNITY
  GENERAL
  HOLIDAY
}

enum EventStatus {
  ACTIVE
  CANCELLED
  COMPLETED
  POSTPONED
}

enum DonationType {
  GENERAL
  ZAKAT
  SADAQAH
  FIDYAH
  KAFFARAH
  PROJECT
}

enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}